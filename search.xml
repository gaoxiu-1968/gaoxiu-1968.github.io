<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>类型转换</title>
      <link href="2021/04/25/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>2021/04/25/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul><li>int</li><li>long</li><li>double</li></ul><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul><li>Integer</li><li>Long</li><li>Double</li><li>BigInteger</li><li>BigDecimal</li><li>String</li><li>List</li><li>Map</li><li>Array</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li>byte</li><li>short</li><li>int</li><li>long</li><li>float</li><li>double</li><li>boolean</li><li>char</li></ul><h4 id="引用数据类型-1"><a href="#引用数据类型-1" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><h5 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h5><ul><li><p>Byte</p></li><li><p>Short</p></li><li><p>Integer</p></li><li><p>Long</p></li><li><p>Float</p></li><li><p>Double</p></li><li><p>Boolean</p></li><li><p>Character</p></li><li><p>BigInteger</p></li><li><p>BigDecimal</p></li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li><p>String</p><p>字符串是一种非常独特的数据类型</p></li><li><p>List</p></li><li><p>Map</p></li><li><p>Array</p></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="基本数据类型转基本数据类型"><a href="#基本数据类型转基本数据类型" class="headerlink" title="基本数据类型转基本数据类型"></a>基本数据类型转基本数据类型</h4><ul><li><p>隐式转换</p><p>扩大原始转换</p><p>规则： byte&lt;short&lt;int&lt;long&lt;float&lt;double</p><p>布尔和字符一般不参与转换！</p></li><li><p>显示转换</p><p>缩小原始转换</p><p>也就是上面的翻过来转换，都需要强转</p></li></ul><h4 id="基本数据类型和包装类互转"><a href="#基本数据类型和包装类互转" class="headerlink" title="基本数据类型和包装类互转"></a>基本数据类型和包装类互转</h4><ul><li><p>自动装箱</p><p>基本类型隐式转换成对应的包装类</p></li><li><p>自动拆箱</p><p>包装类隐式转换成对应的基本数据类型</p></li></ul><h4 id="基本数据类型和字符串互转"><a href="#基本数据类型和字符串互转" class="headerlink" title="基本数据类型和字符串互转"></a>基本数据类型和字符串互转</h4><ul><li><p>基本数据类型转字符串</p><ol><li>任何基本类型和字符串相加结果为字符串</li><li>String.valueOf()方法可以把基本数据类型转换成字符串</li></ol></li><li><p>字符串转基本类型</p></li></ul><p>字符串转基本类型就是转换成对应的包装类，使用的方法就是包装类内封装的方法</p><h4 id="包装类和字符串互转"><a href="#包装类和字符串互转" class="headerlink" title="包装类和字符串互转"></a>包装类和字符串互转</h4><p>包装类和字符串之间不能强制转换<br>只能通过对应的类方法进行转换，如果类方法不支持这个类型转换，就不能进行转换。</p><h3 id="强制转换逻辑"><a href="#强制转换逻辑" class="headerlink" title="强制转换逻辑"></a>强制转换逻辑</h3><p>一个超类能做的东西,其子类也能做,而一个子类能做的东西超类不一定能做,所以就有这样的规则:<br>(1).一个子类的对象可以强制转换成为其超类的对象;<br>(2).一个超类的对象如果强制转换成子类的对象将在运行的时候有异常抛出;<br>(3).如果不是同一继承树上的类强制转换,将产生编译错误.</p><ul><li>参考文档<br><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html">https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>递归:获取整棵树</title>
      <link href="2020/12/16/%E9%80%92%E5%BD%92-%E8%8E%B7%E5%8F%96%E6%95%B4%E6%A3%B5%E6%A0%91/"/>
      <url>2020/12/16/%E9%80%92%E5%BD%92-%E8%8E%B7%E5%8F%96%E6%95%B4%E6%A3%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>递归就是自己调用自己</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json参数格式不对引发的异常</title>
      <link href="2020/12/10/json%E5%8F%82%E6%95%B0%E6%A0%BC%E5%BC%8F%E4%B8%8D%E5%AF%B9%E5%BC%95%E5%8F%91%E7%9A%84%E5%BC%82%E5%B8%B8/"/>
      <url>2020/12/10/json%E5%8F%82%E6%95%B0%E6%A0%BC%E5%BC%8F%E4%B8%8D%E5%AF%B9%E5%BC%95%E5%8F%91%E7%9A%84%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<p><strong>问题:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.fasterxml.jackson.core.JsonParseException: <span class="function">Unexpected <span class="title">character</span> <span class="params">(<span class="string">&#x27; &#x27;</span> (code <span class="number">160</span>)</span>): was</span></span><br></pre></td></tr></table></figure><p>类似于这种错误都是传递参数格式不对,jackson无法正常解析json-&gt;object报出的错误.</p><p>重新检索数据格式就可以解决该类问题!</p>]]></content>
      
      
      <categories>
          
          <category> 错误集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo搭建博客</title>
      <link href="2020/12/08/%E5%9F%BA%E4%BA%8EHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/12/08/%E5%9F%BA%E4%BA%8EHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><blockquote><p>框架: hexo </p><p>主题: butterfly</p><p>服务器: githubPage</p><p>域名: blog.zhangmingke.top</p></blockquote><h2 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h2><blockquote><p>前提: </p><p>node.js</p><p>git</p></blockquote><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>全局安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><blockquote><p>新建网站,一般一个网站只是用一次</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder(文件夹路径,没有指定这个该参数,默认在当前文件夹下)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">├── _config.yml 网站的配置信息</span><br><span class="line">├── package.json 应用程序信息</span><br><span class="line">├── scaffolds 模板文件夹</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts 草稿文章目录</span><br><span class="line">|   └── _posts 发布文章目录</span><br><span class="line">└── themes 主题</span><br></pre></td></tr></table></figure><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><blockquote><p>新建文章</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout]&lt;title&gt;</span><br><span class="line"><span class="comment"># 不指定layout默认是用_config.yml指定的defaultlayout,一般是post</span></span><br><span class="line"><span class="comment"># 默认有三个布局,post,page,draft</span></span><br><span class="line"><span class="comment"># 我只需要post</span></span><br></pre></td></tr></table></figure><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><blockquote><p>生成静态文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">可以省略为 hexo g</span><br><span class="line">也可以添加参数,在生成静态文件的同时部署项目,比如 hexo g -d</span><br></pre></td></tr></table></figure><h4 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h4><blockquote><p>发表草稿</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish &lt;filename&gt;</span><br></pre></td></tr></table></figure><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><blockquote><p>部署项目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">可以省略为hexo d</span><br></pre></td></tr></table></figure><h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class="line">在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令</span><br></pre></td></tr></table></figure><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">本地启动服务,可以查看具体的样子</span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><blockquote><p>hexo 所有主题都要遵守hexo主题结构要求</p><p>所以配置信息的所在位置是相通的!</p></blockquote><h3 id="butterfly主题"><a href="#butterfly主题" class="headerlink" title="butterfly主题"></a>butterfly主题</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>butterfly提供两种安装方法:</p><p>​    通过下载主题文件到theme文件下</p><p>​    npm安装,可以到node_modules\hexo-theme-butterfly修改文件进行魔改</p></blockquote><p>具体安装可以参照butterfly官网安装教程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;butterfly.js.org&#x2F;posts&#x2F;21cfbf15&#x2F;#%E5%AE%89%E8%A3%9D</span><br></pre></td></tr></table></figure><h4 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cover: 图片地址(在编写markdown页面的时候使用)</span><br></pre></td></tr></table></figure><h4 id="网址图标"><a href="#网址图标" class="headerlink" title="网址图标"></a>网址图标</h4><blockquote><p>butterfly 主题加载图标地址是/favicon.png ,但是自带的图标图片却在/img目录下，找不到图片而不显示图标</p></blockquote><p>解决方法：</p><p>​    把favicon.png直接放在source目录下，生成页面时，会放到根目录下！</p><h4 id="自定域"><a href="#自定域" class="headerlink" title="自定域"></a>自定域</h4><blockquote><p>github上每次提交代码,自定义域都会消失,需要重新设置</p></blockquote><p>解决方法:<br>    在source中新建CNAME文件里面写入自己的域名用来替换github中Custom domain的设置</p>]]></content>
      
      
      <categories>
          
          <category> 成果 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
